<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hi, I'm Nhân - side projects</title><link href="https://hi.imnhan.com/" rel="alternate"></link><link href="/feeds/side-projects.atom.xml" rel="self"></link><id>https://hi.imnhan.com/</id><updated>2020-06-10T08:25:00+07:00</updated><subtitle>and this is my humble corner on the interwebs.</subtitle><entry><title>Streaming videos from Google Drive - 2nd attempt</title><link href="https://hi.imnhan.com/posts/streaming-videos-from-google-drive-2nd-attempt/" rel="alternate"></link><published>2020-06-10T08:25:00+07:00</published><updated>2020-06-10T08:25:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:hi.imnhan.com,2020-06-10:/posts/streaming-videos-from-google-drive-2nd-attempt/</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I improved the Google Drive video streaming experience mentioned in
an &lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;earlier blog post&lt;/a&gt;. It now works like this on an Android phone with
mpv-android&amp;nbsp;installed:&lt;/p&gt;
&lt;p&gt;&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/gflick-phone-demo.mp4" type="video/mp4"&gt;
&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;The longer version&amp;nbsp;follows.&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;Previously&lt;/a&gt; I was writing a proxy of sorts that adapted Google Drive&amp;#8217;s
&amp;#8220;bearer token&amp;#8221; auth to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I improved the Google Drive video streaming experience mentioned in
an &lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;earlier blog post&lt;/a&gt;. It now works like this on an Android phone with
mpv-android&amp;nbsp;installed:&lt;/p&gt;
&lt;p&gt;&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/gflick-phone-demo.mp4" type="video/mp4"&gt;
&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;The longer version&amp;nbsp;follows.&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;Previously&lt;/a&gt; I was writing a proxy of sorts that adapted Google Drive&amp;#8217;s
&amp;#8220;bearer token&amp;#8221; auth to the more widely supported &amp;#8220;basic auth&amp;#8221; so I could watch
movies. I was stuck at the point where desktop video players could stream just
fine while their android ports would do&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;Turns out it was a &lt;span class="caps"&gt;TLS&lt;/span&gt; issue: I configured nginx to use TLSv1.3 which is the
latest and greatest, but mpv/vlc on android came bundled with older &lt;span class="caps"&gt;TLS&lt;/span&gt;
libraries which only supported up to v1.2. This led me to another surprise: the
nginx config generated by &lt;a href="https://ssl-config.mozilla.org/#server=nginx&amp;amp;version=1.17.7&amp;amp;config=intermediate&amp;amp;openssl=1.1.1d&amp;amp;guideline=5.4"&gt;Mozilla&amp;#8217;s &lt;span class="caps"&gt;SSL&lt;/span&gt; Configuration Generator&lt;/a&gt;, while
advertised to support older TLSes (in either &lt;code&gt;Intermediate&lt;/code&gt; or &lt;code&gt;Old&lt;/code&gt; mode),
didn&amp;#8217;t actually work in practice. &lt;a href="https://www.ssllabs.com/ssltest/"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; tests&lt;/a&gt; always reported that the only
working &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; protocol was&amp;nbsp;TLSv1.3.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The issue was pinpointed thanks to reading the android device&amp;#8217;s logcat
output. Did you know that in order to read logcat you only need to install
some &lt;a href="https://pkgs.org/search/?q=android-tools"&gt;8-megabyte package&lt;/a&gt; instead of the whole android studio behemoth? I
do&amp;nbsp;now!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As luck would have it, &lt;a href="https://caddyserver.com/v2"&gt;Caddy v2&lt;/a&gt; was recently released and they even
provided a Debian repo! I had used Caddy v1 in the past but my impression was
that despite their pitch of a &amp;#8220;download and run&amp;#8221; experience, actual &lt;a href="https://github.com/caddyserver/caddy/tree/v1.0.4/dist/init/linux-systemd"&gt;extra
work&lt;/a&gt; was required - it was straightforward and well-documented, but it was
still extra busywork. This combined with the hassle of having to compile my own
binary bounced me back to nginx. Both of these issues have been addressed in
v2, so there&amp;#8217;s really no reason to keep wrestling with nginx + certbot&amp;nbsp;anymore.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On that note, to this day I still haven&amp;#8217;t figured out how to make the
nginx/certbot combo play nice with ansible. Problem is, certbot&amp;#8217;s nginx
plugin wants to mutate the nginx config file itself, so the nginx configs
before vs after certbot runs are decidedly different. This requires
ridiculous gymnastics to mold into an ansible play - and don&amp;#8217;t even get me
started on multi-site setups. A &lt;a href="https://github.com/nhanb/gflick/blob/4dd3dbdbdfe8de66337ed0a2fe420dd0e1d72f39/caddy/gflick"&gt;Caddyfile&lt;/a&gt;, on the other hand, simply
gets out of your&amp;nbsp;way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that &lt;span class="caps"&gt;TLS&lt;/span&gt; is settled, I also made some changes to the usage&amp;nbsp;flow:&lt;/p&gt;
&lt;h3&gt;Authentication&lt;/h3&gt;
&lt;p&gt;The authentication responsibility has been moved from nginx/caddy to the python
application itself to enable more fine-grained&amp;nbsp;control:&lt;/p&gt;
&lt;p&gt;Every route, except for the video-serving &lt;code&gt;/v/*&lt;/code&gt;, requires a user_token cookie.
If it doesn&amp;#8217;t exist, redirect to &lt;code&gt;/login&lt;/code&gt;, which will let user submit a
password in order to get the user token back. User token is a 128-byte string
that&amp;#8217;s regenerated every time the python script restarts. I should probably
write a janitor script to periodically regenerate it&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;When user navigates to a video, a unique 128-byte slug is generated just for it
and the video can now be directly streamed at &lt;code&gt;/v/&amp;lt;slug&amp;gt;&lt;/code&gt;, with no
authentication required. Currently slugs older than 1 day are wiped on python
application startup, but then, like user token, I should probably stop relying
on the script restarting to do cleanup&amp;nbsp;operations.&lt;/p&gt;
&lt;p&gt;With this setup I can freely share the &lt;code&gt;/v/&amp;lt;slug&amp;gt;&lt;/code&gt; url to other people without
leaking any auth credentials, and they eventually expire too. There&amp;#8217;s tuning to
be done for expiration mechanisms but the foundations are&amp;nbsp;there.&lt;/p&gt;
&lt;h3&gt;Aesthetics&lt;/h3&gt;
&lt;p&gt;The web interface has been revamped to make it easier for &lt;strike&gt;fat-fingered
people on $current_year&amp;#8217;s trendy stupidly thin&lt;/strike&gt; phones. Also present
are folder icons and thumbnails, so it finally gives me everything I want from
Google Drive&amp;#8217;s web &lt;span class="caps"&gt;UI&lt;/span&gt; and nothing that I don&amp;#8217;t. Fun fact: it works on
&lt;a href="https://www.netsurf-browser.org/"&gt;NetSurf&lt;/a&gt; too (but then again why wouldn&amp;#8217;t&amp;nbsp;it?).&lt;/p&gt;
&lt;p&gt;&lt;img alt="gflick screenshot" src="/images/gflick_01_mobile.png"&gt;&lt;/p&gt;
&lt;h2&gt;What&amp;#8217;s the&amp;nbsp;catch?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Client device is solely responsible for decoding the raw file.&lt;/strong&gt; This is both
a blessing and a curse: We are guaranteed original quality but if the file was
encoded with newer codecs (h265, av1, etc.) we&amp;#8217;re stuck with inefficient
software decoding and some devices are just too weak to do so smoothly. My
Amazon Fire &lt;span class="caps"&gt;HD&lt;/span&gt; 10 tablet suffers greatly when playing 1080p 10bit anime.
Curiously, my crappy Mi A3 phone yields better performance, although stutters
still happen here and there. More modest h264 movies play flawlessly, for what
it&amp;#8217;s&amp;nbsp;worth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a proof of concept and the codebase quality reflects that.&lt;/strong&gt; I&amp;#8217;m in
the middle of cleaning it up for pypi friendliness and xdg compliance, but
currently stuck when porting from std&amp;#8217;s http server to bottlepy. The current
dirty codebase is working fine for me so I&amp;#8217;m in no hurry&amp;nbsp;though&amp;#8230;&lt;/p&gt;
&lt;h2&gt;In&amp;nbsp;conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m happy with how things turned out: I have &lt;a href="https://drive.google.com/"&gt;zero-maintenance unlimited cloud
storage&lt;/a&gt; for movies and an effortless streaming experience that requires
virtually no client-side setup - just install a browser and streaming-capable
video player, then everything works out of the box. This is &lt;em&gt;almost&lt;/em&gt; as
convenient as Netflix, but without the stupid quality restriction on
non-sanctioned devices. I probably need to upgrade to a beefier tablet&amp;nbsp;though.&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>Introducing McRoss - a minimal gemini browser</title><link href="https://hi.imnhan.com/posts/introducing-mcross-a-minimal-gemini-browser/" rel="alternate"></link><published>2020-05-29T09:44:00+07:00</published><updated>2020-05-29T09:44:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:hi.imnhan.com,2020-05-29:/posts/introducing-mcross-a-minimal-gemini-browser/</id><summary type="html">&lt;p&gt;The last couple of months saw the first &amp;#8220;&lt;span class="caps"&gt;PR&lt;/span&gt;&amp;#8221; wave of &lt;a href="https://gemini.circumlunar.space/"&gt;the gemini protocol&lt;/a&gt;
on the usual online &lt;a href="https://lobste.rs/s/79pu7o/gemini_protocol_inbetween_gopher_web"&gt;tech&lt;/a&gt;&lt;a href="https://news.ycombinator.com/item?id=23042424"&gt;(bro)&lt;/a&gt; forums. Its pitch is simple: the web
has gone out of hand, gopher is too barebones and insecure by default, here&amp;#8217;s a
new thing that sits in the&amp;nbsp;middle …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The last couple of months saw the first &amp;#8220;&lt;span class="caps"&gt;PR&lt;/span&gt;&amp;#8221; wave of &lt;a href="https://gemini.circumlunar.space/"&gt;the gemini protocol&lt;/a&gt;
on the usual online &lt;a href="https://lobste.rs/s/79pu7o/gemini_protocol_inbetween_gopher_web"&gt;tech&lt;/a&gt;&lt;a href="https://news.ycombinator.com/item?id=23042424"&gt;(bro)&lt;/a&gt; forums. Its pitch is simple: the web
has gone out of hand, gopher is too barebones and insecure by default, here&amp;#8217;s a
new thing that sits in the&amp;nbsp;middle.&lt;/p&gt;
&lt;p&gt;Personally I&amp;#8217;m skeptical if this thing will take off any time soon (or ever).
Sure I agree the web is &lt;a href="https://idlewords.com/talks/website_obesity.htm"&gt;comically bloated&lt;/a&gt;, &lt;a href="https://neustadt.fr/essays/against-a-user-hostile-web/"&gt;openly user-hostile&lt;/a&gt;, and
the big players are only &lt;a href="https://developers.google.com/amp"&gt;adding to the problem&lt;/a&gt;, but the fact remains that
the web is the most convenient thing there is, both from a user&amp;#8217;s and
developer&amp;#8217;s perspective. Gemini is a fun experiment. It may even be a hit among
&lt;strike&gt;nerds&lt;/strike&gt; power users and the overly privacy-concious, but that&amp;#8217;s&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;But then again, I consider myself among the &amp;#8220;&lt;strike&gt;nerds&lt;/strike&gt; power users
and the overly privacy-concious&amp;#8221; demographic, so I naturally want to see what
cool stuff people on the gemini-verse are up to. Therefore, I need a gemini
browser. &lt;em&gt;Naturally&lt;/em&gt;, I &lt;a href="https://sr.ht/~nhanb/mcross/"&gt;wrote one&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="McRoss Browser screenshot" src="/images/mcross_01_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;At this stage it can browse plaintext and gemini content, but not binary yet.
It also doesn&amp;#8217;t verify &lt;span class="caps"&gt;TLS&lt;/span&gt; certificates, because turns out &lt;a href="https://todo.sr.ht/~nhanb/mcross/1"&gt;in the gemini
world&lt;/a&gt; it&amp;#8217;s preferable for browser to use self-signed certs and expect
clients to trust on first use (&lt;span class="caps"&gt;TOFU&lt;/span&gt;), just like how basic &lt;span class="caps"&gt;SSH&lt;/span&gt; works. I haven&amp;#8217;t
implemented &lt;span class="caps"&gt;TOFU&lt;/span&gt; yet so the browser trusts whatever and is vulnerable to &lt;span class="caps"&gt;MITM&lt;/span&gt;
attacks for every request. It&amp;#8217;s highly unlikely that anyone would bother to,
but take everything you read with a pinch of salt&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Why not use one of the existing browsers you ask? Sure enough there are a bunch
of existing browsers, with &lt;a href="https://sr.ht/~julienxx/Castor/"&gt;Castor&lt;/a&gt; appearing to be the furthest along in
development, but it didn&amp;#8217;t work &lt;em&gt;quite&lt;/em&gt; the way I would like. This made me want
to find out for myself just how hard it is to build a reasonably user-friendly
desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; application. For the rest of this blog post I try to elaborate on
my idea of a &lt;em&gt;user-friendly desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; application&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Visual&amp;nbsp;feedback:&lt;/h3&gt;
&lt;p&gt;When I click a button, visit a link, or press Enter on the address bar, I
expect some kind of visual feedback that tells me my input registered
correctly, and the browser is working on my request, not hanging. This sounds
ridiculously elementary considering that&amp;#8217;s how, say, all Windows 95 programs
worked, but here we are two decades and a half later and the Castor browser
just completely freezes the &lt;span class="caps"&gt;GUI&lt;/span&gt; during every network&amp;nbsp;request.&lt;/p&gt;
&lt;p&gt;With McRoss I intentionally put the &lt;span class="caps"&gt;GUI&lt;/span&gt; and I/O event loops in their separate
threads to make sure the program&amp;#8217;s always responsive. I also paid attention to
small details like the loading cursor and real-time status bar. At no point
should the program hang or crash without displaying a proper&amp;nbsp;message.&lt;/p&gt;
&lt;h3&gt;Aesthetics:&lt;/h3&gt;
&lt;p&gt;Call me picky but I don&amp;#8217;t like how in Castor links are presented as buttons and
they don&amp;#8217;t even have breathing room between&amp;nbsp;them:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Castor links" src="/images/mcross_02_castor.png"&gt;&lt;/p&gt;
&lt;p&gt;Another admittedly petty issue I have is that it&amp;#8217;s &lt;span class="caps"&gt;GTK&lt;/span&gt; while I&amp;#8217;m using &lt;span class="caps"&gt;KDE&lt;/span&gt;
Plasma, and although &lt;span class="caps"&gt;KDE&lt;/span&gt; has a compatibility layer that tries to render &lt;span class="caps"&gt;GTK&lt;/span&gt;
widgets as close to &lt;span class="caps"&gt;KDE&lt;/span&gt; counterparts as possible, the result is still&amp;#8230;&amp;nbsp;subpar.&lt;/p&gt;
&lt;p&gt;McRoss on the other hand uses the tk gui toolkit, and as of tk 8.6, it
automatically gives you the native look and feel on Windows and Mac &lt;span class="caps"&gt;OS&lt;/span&gt; (well,
not automatically but it takes trivial work anyway). Linux however doesn&amp;#8217;t have
such a thing, but the bundled &lt;code&gt;clam&lt;/code&gt; theme looks pleasing enough for me. Yes, I
do think a retro looking theme fares better than the gtk-on-kde look, and its
simple scrollbar looks and, more importantly, &lt;em&gt;works&lt;/em&gt; way better than those
nigh-unclickable abominations that &lt;span class="caps"&gt;KDE&lt;/span&gt; and &lt;span class="caps"&gt;GTK&lt;/span&gt; call their &amp;#8220;modern scrollbar&amp;#8221;,
fight&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Another explicit design decision in McRoss is that while custom styling is
applied to special lines (heading, list, code block&amp;#8230;), their textual content
is kept the same as source, with the special characters (&lt;code&gt;#&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, etc.)
intact. This way when someone has read a gemini page, they already know how to
write one. I lifted this idea off of &lt;a href="https://4chan.org/"&gt;imageboards&lt;/a&gt; and &lt;a href="https://textboard.org/"&gt;textboards&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installation:&lt;/h3&gt;
&lt;p&gt;Castor is written in Rust. One of Rust&amp;#8217;s strong points is the ability to
compile to a single statically linked executable that users can just download
and run. Unfortunately, Castor doesn&amp;#8217;t currently provide those compiled
executables so users are supposed to install the Rust toolchain then build
Castor themselves. Compiling a gtk-enabled Rust project is&amp;#8230; not a quick&amp;nbsp;affair.&lt;/p&gt;
&lt;p&gt;McRoss is currently packaged as a well-behaved PyPI package and can be
installed with &lt;code&gt;pip3 install mcross&lt;/code&gt;. Its only dependencies are the standard
library and &lt;code&gt;curio&lt;/code&gt; so installation should be super fast. I know I know,
requiring python in the first place is its own can of worms. I do plan to
improve the situation with &amp;#8220;frozen&amp;#8221; executables some time down the&amp;nbsp;line.&lt;/p&gt;
&lt;h1&gt;Closing&amp;nbsp;thoughts&lt;/h1&gt;
&lt;p&gt;To me the whole gemini ecosystem represents the long-lost naive optimism of an
earlier web ecosystem. It was not even as far as the &amp;#8220;good old
gopher/bbs days&amp;#8221; those boomers keep ranting about - it was the days of early
MMORPGs, of crappy Yahoo! 360 blogs riced up with copy-pasted html/css all over
the place, of numerous Vietnamese warez forums powered by pirated vBulletin
running on shady free shared CPanel hosts, of monthly Drupal/Joomla &lt;span class="caps"&gt;SQL&lt;/span&gt;
injection zero-days. It was truly the wild wild web, insanely accessible,
insanely unsafe, and insanely fun. It was the web where a young clueless
teenage me could find fun random stuff everyday, put fun random stuff out
there for everyone to see, no matter how shitty and unsecure they are, because
it didn&amp;#8217;t matter if I get pwn&amp;#8217;d: my life back then wasn&amp;#8217;t that much dependent
on the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;Can I get all that back? I think not. The web, or more broadly, the internet
grew up (to be a nasty adult, but an adult nevertheless), just like anything
where there&amp;#8217;s enough profit to be made. I&amp;#8217;m not saying it&amp;#8217;s a bad thing (hell,
I make a living out of building webstuff), but it is undeniably a sad thing.
Gemini may be a spark that begins a push back against unjustified complexity,
or it may end up being just another niche tech curiosity. I&amp;#8217;m leaning towards
the latter, but in the meantime, I&amp;#8217;ll keep peeking at the geminiverse with my
comfy trusty&amp;nbsp;browser.&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>Towards an acceptable video playing experience</title><link href="https://hi.imnhan.com/posts/towards-an-acceptable-video-playing-experience/" rel="alternate"></link><published>2020-04-26T10:06:00+07:00</published><updated>2020-04-26T10:06:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:hi.imnhan.com,2020-04-26:/posts/towards-an-acceptable-video-playing-experience/</id><summary type="html">&lt;p&gt;I watch movies and &lt;span class="caps"&gt;TV&lt;/span&gt; shows.
Naturally, I have some strong preferences on how to view&amp;nbsp;them:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English subtitles&lt;/strong&gt;. Most things I watch are in English.
Although I&amp;#8217;m perfectly comfortable with face-to-face English conversations, I
just can&amp;#8217;t keep up with English dialogue in movies.
I also don&amp;#8217;t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I watch movies and &lt;span class="caps"&gt;TV&lt;/span&gt; shows.
Naturally, I have some strong preferences on how to view&amp;nbsp;them:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English subtitles&lt;/strong&gt;. Most things I watch are in English.
Although I&amp;#8217;m perfectly comfortable with face-to-face English conversations, I
just can&amp;#8217;t keep up with English dialogue in movies.
I also don&amp;#8217;t want to put up with badly translated subs, so English subtitles
they must be. This rules out most Vietnamese&amp;nbsp;&amp;#8220;netflixes&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1080p&lt;/strong&gt;, unless it&amp;#8217;s ancient or super rare&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Streamable from tablets&lt;/strong&gt;. I shouldn&amp;#8217;t need to turn on my &lt;span class="caps"&gt;PC&lt;/span&gt; just to catch up
on the latest Better Call Saul&amp;nbsp;episode.&lt;/p&gt;
&lt;p&gt;In 2020, there sure are a variety of options available, all of which fall short
in some&amp;nbsp;ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shady ad-infested Vietnamese movie streaming sites (phimmoi etc): Obnoxious
  pop-up tabs aside, they always &lt;a href="https://kipalog.com/posts/Cac-web-phim-da-giam-99-99--chi-phi-bang-google-drive-nhu-the-nao"&gt;abuse Google Drive&lt;/a&gt; (or even Facebook?)
  storage behind the scene. Problem is Google Drive encoding is lossy as hell,
  so even at 1080p they look noticeably worse than the original. Also they
  almost always come with hardcoded Vietnamese&amp;nbsp;subs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netflix clones by big ISPs: Pathetic catalogues. Vietnamese&amp;nbsp;subs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netflix itself: Actually quite good thanks to usable Android app, but besides
  the increasingly shitty catalogue, it&amp;#8217;s &lt;a href="https://help.netflix.com/en/node/23742"&gt;impossible to get 1080p from
  Linux&lt;/a&gt;. Also I hate that I can&amp;#8217;t manually set the video quality: even if
  my current connection gets slow I&amp;#8217;d rather pause and wait for buffering
  instead of putting up with a pixelated 480p mess. I still have my Netflix
  subscription today, but only&amp;nbsp;grudgingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;dude, like, just torrent it&amp;#8221;. Solid advice since torrents usually come with
  embedded English sub, but it requires actually downloading the thing first,
  and can&amp;#8217;t easily switch devices without moving the file&amp;nbsp;along.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting up a torrent + plex server? That would require (1) ample disk space,
  (2) generous network bandwidth, (3) actual horsepower for transcoding and (4)
  fast enough network access from home or wherever I watch movies&amp;nbsp;from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A local &lt;span class="caps"&gt;NAS&lt;/span&gt;-style server satisfies (1), (3) &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; (4) but struggles with (2),
  and I don&amp;#8217;t want it to hog my home internet&amp;nbsp;pipes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding a &lt;span class="caps"&gt;VPS&lt;/span&gt; service with (1) &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; (2) is doable, but (3) gets expensive
  fast and usually they&amp;#8217;re in the &lt;span class="caps"&gt;US&lt;/span&gt; or &lt;span class="caps"&gt;EU&lt;/span&gt; which can never have (4). I&amp;#8217;m
  actually running a seedbox on Ramnode but can&amp;#8217;t run plex on it because of
  lack of (3) and (4). If I&amp;#8217;m willing to pay more I can get a Hetzner
  dedicated server which can probably do (3) but (4) gets even&amp;nbsp;worse.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remote seedbox + Google&amp;nbsp;Drive&lt;/h2&gt;
&lt;p&gt;I settled on Netflix and torrented stuff that&amp;#8217;s not available there.
For the seedbox, I installed Transmission-web on a Ramnode &lt;span class="caps"&gt;VPS&lt;/span&gt; that has &lt;span class="caps"&gt;320GB&lt;/span&gt;
of &lt;span class="caps"&gt;HDD&lt;/span&gt; at $50/year. The network bandwidth is meh but it gets the job&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;Since Transmission supports hooks via external scripts, I set it up so that
downloaded torrents get uploaded to my Google Drive using &lt;code&gt;rclone&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now whenever I find something interesting that&amp;#8217;s not on Netflix, I look for a
working torrent file and tell my seedbox to get it. Thanks to the web interface
I can do it from both my &lt;span class="caps"&gt;PC&lt;/span&gt; and tablet. I don&amp;#8217;t have to keep my devices running
so it doesn&amp;#8217;t matter if the torrent is not well-seeded and takes a long&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Once the file lands on Google Drive, I can&amp;nbsp;either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;watch it directly from GDrive&amp;#8217;s web/Android app if I don&amp;#8217;t care about
  subtitles or original quality,&amp;nbsp;or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;download the file first and watch&amp;nbsp;properly&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter is not&amp;nbsp;ideal.&lt;/p&gt;
&lt;h2&gt;Enter&amp;nbsp;gflick&lt;/h2&gt;
&lt;p&gt;Turns out advanced video players like &lt;code&gt;mpv&lt;/code&gt; and &lt;code&gt;vlc&lt;/code&gt; can directly stream &lt;span class="caps"&gt;HTTP&lt;/span&gt;
videos with full support for seeking and audio / text(a.k.a subtitles) tracks.
See, well-formed video container formats will have metadata at the beginning of
the file telling where each track lies within the file. The player can download
just the metadata first, then the subtitle track, then the actual video track
starting from a specific position. This is only possible if the http server
supports partial content download &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range"&gt;via the &lt;code&gt;Range&lt;/code&gt; header&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Google Drive does have a &amp;#8220;direct link&amp;#8221; &lt;span class="caps"&gt;API&lt;/span&gt; in the form of
&lt;code&gt;https://www.googleapis.com/drive/v3/files/&amp;lt;fileId&amp;gt;?alt=media&lt;/code&gt;, which luckily
supports partial download. The bad news is downloading private files requires
authentication via a bearer token. The only &lt;span class="caps"&gt;HTTP&lt;/span&gt; authentication scheme that
these players support, as far as I know, is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Basic_authentication_scheme"&gt;Basic auth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I wrote &lt;a href="https://github.com/nhanb/gflick"&gt;gflick&lt;/a&gt;, which is practically an &lt;span class="caps"&gt;HTTP&lt;/span&gt; proxy that does Google
authentication behind the scene, exposing a plain &lt;span class="caps"&gt;HTTP&lt;/span&gt; streaming endpoint so
&lt;code&gt;mpv&lt;/code&gt; and the like can use without&amp;nbsp;modification.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what it looks like in&amp;nbsp;action:&lt;/p&gt;
&lt;p&gt;&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/gflick.mp4" type="video/mp4"&gt;
&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;It can run just fine as a local server, but cumbersome and not practical on
tablets, so I put it on a publicly accessible server, protected by nginx which
does &lt;span class="caps"&gt;TLS&lt;/span&gt; and Basic Auth. As mentioned earlier, good video players can do basic
auth out of the box. Gflick also exposes a simple web interface to browse my
Google Drives, so now I can browse my drive on any pc/tablet, and watch things
with full seek, subtitle/audio track support,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Not quite. While desktop versions of these players work fine, their Android
versions won&amp;#8217;t play it. Now I regret selling my Surface Go!&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;And&amp;#8230; that&amp;#8217;s where I&amp;#8217;m stuck at the moment. Not sure if I should buy one of
those Chinese Surface knock-offs or&amp;nbsp;what.&lt;/p&gt;
&lt;h2&gt;Other failed&amp;nbsp;attempts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nhanb/mpv-gdrive"&gt;mpv-gdrive&lt;/a&gt;: Using mpv&amp;#8217;s lua scripting &lt;span class="caps"&gt;API&lt;/span&gt; to automatically set the
  correct bearer auth headers. Worked fine on desktop, failed miserably on&amp;nbsp;android.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhanb/drivein"&gt;drivein&lt;/a&gt;: Uses &lt;code&gt;rclone mount&lt;/code&gt;. Worked fine on desktop, android wouldn&amp;#8217;t
  allow mounting without&amp;nbsp;root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also both of those required setting up each client device. Not&amp;nbsp;ideal.&lt;/p&gt;
&lt;h3&gt;Update June 10,&amp;nbsp;2020&lt;/h3&gt;
&lt;p&gt;The sequel is out: &lt;a href="/posts/streaming-videos-from-google-drive-2nd-attempt/"&gt;Streaming videos from Google Drive - 2nd&amp;nbsp;attempt&lt;/a&gt;&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>Introducing Pytaku - the only online manga reader you’ll ever need</title><link href="https://hi.imnhan.com/posts/introducing-pytaku-the-only-online-manga-reader-youll-ever-need/" rel="alternate"></link><published>2015-01-02T21:19:00+07:00</published><updated>2015-01-02T21:19:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:hi.imnhan.com,2015-01-02:/posts/introducing-pytaku-the-only-online-manga-reader-youll-ever-need/</id><summary type="html">&lt;p&gt;&lt;a href="https://pytaku.appspot.com"&gt;Pytaku&lt;/a&gt; is an online manga reader that scrapes data from multiple Vietnamese and English
manga sites, giving you one single place to keep track of your reading progress and watch for new
chapters with ease. Here are some of the features implemented so&amp;nbsp;far:&lt;/p&gt;
&lt;h2&gt;Lightning fast, ad-free reading&amp;nbsp;experience&lt;/h2&gt;
&lt;p&gt;All …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://pytaku.appspot.com"&gt;Pytaku&lt;/a&gt; is an online manga reader that scrapes data from multiple Vietnamese and English
manga sites, giving you one single place to keep track of your reading progress and watch for new
chapters with ease. Here are some of the features implemented so&amp;nbsp;far:&lt;/p&gt;
&lt;h2&gt;Lightning fast, ad-free reading&amp;nbsp;experience&lt;/h2&gt;
&lt;p&gt;All pages in a chapter are loaded at once, unlike most other sites that only let you view one page
at a time, forcing you to reload their distracting advertisements and disrupt you flow (especially
for people with not-so-fast internet&amp;nbsp;connection).&lt;/p&gt;
&lt;p&gt;And it gets better: using state-of-the-art &lt;span class="caps"&gt;AJAX&lt;/span&gt; dark magic, even navigation between chapters is
lightning fast. Loaded pages are cached, so pressing &amp;#8220;Back&amp;#8221; or &amp;#8220;Forward&amp;#8221; on your browser happens&amp;nbsp;instantly.&lt;/p&gt;
&lt;h2&gt;Keep track of your reading progress.&amp;nbsp;Automatically.&lt;/h2&gt;
&lt;p&gt;Each logged in user will have a nice badge on each chapter showing their progress: (keeping a
chapter page open for a few seconds registers it as &amp;#8220;reading&amp;#8221;, and scrolling to the bottom marks it
as&amp;nbsp;&amp;#8220;finished&amp;#8221;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter progress badge" src="/images/pytaku_01_chapter_progress.png"&gt;&lt;/p&gt;
&lt;h2&gt;Bookmark series to watch for&amp;nbsp;updates&lt;/h2&gt;
&lt;p&gt;Maintain a list of series so you can have one single place to find out whether there are new
chapters for the series you&amp;nbsp;love.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bookmarked series" src="/images/pytaku_02_bookmarked_series.png"&gt;&lt;/p&gt;
&lt;h2&gt;English, Vietnamese and support for other&amp;nbsp;languages&lt;/h2&gt;
&lt;p&gt;Pytaku comes in English by default and configurable to be in Vietnamese. If you want to translate
it to your own language, feel free to download the &lt;a href="https://github.com/nhanb/pytaku/blob/master/frontend/languages/en.yaml"&gt;English language file&lt;/a&gt; and start translating
on that, then send it to me to&amp;nbsp;install.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vietnamese interface" src="/images/pytaku_03_vietnamese.png"&gt;&lt;/p&gt;
&lt;h2&gt;Open source and free to run your own&amp;nbsp;site&lt;/h2&gt;
&lt;p&gt;Pytaku&amp;#8217;s source code is released under the free-as-in-freedom &lt;a href="https://www.gnu.org/licenses/quick-guide-gplv3.html"&gt;GPLv3&lt;/a&gt; and &lt;a href="https://github.com/nhanb/pytaku"&gt;put on GitHub&lt;/a&gt;.
Since it&amp;#8217;s written to be run on Google App Engine which is free for small sites, tech-savvy people
can set up their own private pytaku clone in a few minutes. Check out the &lt;a href="https://github.com/nhanb/pytaku/blob/master/README.markdown"&gt;&lt;span class="caps"&gt;README&lt;/span&gt; file&lt;/a&gt; for&amp;nbsp;instructions.&lt;/p&gt;
&lt;h2&gt;Open to suggestions and (hopefully contructive)&amp;nbsp;criticism&lt;/h2&gt;
&lt;p&gt;Want another manga site to be included as source? Need a feature that you think many others can
benefit from? Feel free to open an issue on GitHub, or give me a shout on the official &lt;a href="https://gitter.im/nhanb/pytaku"&gt;support
chat room&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Give it a&amp;nbsp;spin&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pytaku.appspot.com"&gt;Click here&lt;/a&gt; to go to the app. Have fun!&amp;nbsp;:)&lt;/p&gt;</content><category term="side projects"></category><category term="pytaku"></category></entry></feed>